<!doctype html>
<html lang="en">

<head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/png" href="images/cybera_icon.png">
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1" />

    <title>Consol Essence</title>

    <meta name="description" content="Home page for Consol Essence.">

    <!--     Fonts and icons     -->
    <link rel="stylesheet" href="https://fonts.googleapis.com/icon?family=Material+Icons" />
    <link rel="stylesheet" type="text/css" href="https://fonts.googleapis.com/css?family=Roboto:300,400,500,700" />

    <link rel="preload" href="https://maxcdn.bootstrapcdn.com/font-awesome/latest/css/font-awesome.min.css" as="font"
        onload="this.onload=null;this.rel='stylesheet'">

    <!-- CSS Files -->

    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/4.5.3/css/bootstrap.min.css"
        integrity="sha512-oc9+XSs1H243/FRN9Rw62Fn8EtxjEYWHXRvjS43YtueEewbS6ObfXcJNyohjHqVKFPoXXUxwc+q1K7Dee6vv9g=="
        crossorigin="anonymous" />

    <script src="https://code.jquery.com/jquery-3.5.1.js" crossorigin="anonymous"></script>
    <script src="https://ajax.googleapis.com/ajax/libs/jqueryui/1.12.0/jquery-ui.min.js" defer></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-awesome-cursor/0.3.1/jquery.awesome-cursor.min.js"
        integrity="sha512-mR4OOU/ky22CpIhlxfBwQ2ckKWapf+g2+1sbUCkVtFaaRcVLpytf0ERgrXXUUYgFOdbehWOJJdW7QzYJ7XlLiA=="
        crossorigin="anonymous" defer></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.9/umd/popper.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/4.5.3/js/bootstrap.min.js"
        integrity="sha512-8qmis31OQi6hIRgvkht0s6mCOittjMa9GMqtK9hes5iEQBQE/Ca6yGE5FsW36vyipGoWQswBj/QBm2JR086Rkw=="
        crossorigin="anonymous"></script>

    <script src="/jstree-3.3.15/dist/jstree.js"></script>
    <link rel="stylesheet" href="/jstree-3.3.15/dist/themes/default/style.min.css">

    <script src="https://www.unpkg.com/ace-builds@latest/src-noconflict/ace.js"></script>

    <script src="ansi_up/ansi_up.js" type="text/javascript"></script>

    <script src="//cdn.quilljs.com/1.3.6/quill.min.js"></script>
    <link href="//cdn.quilljs.com/1.3.6/quill.snow.css" rel="stylesheet">

    <link rel="stylesheet" href="/xterm/xterm.css" />
    <script src="/xterm/xterm.js"></script>
    <script src="/xterm/xterm-addon-fit.js"></script>

    <link rel="preload" href="/clientCSS/index.css" as="style" onload="this.onload=null;this.rel='stylesheet'">


    <noscript>
        <link rel="stylesheet" href="/clientCSS/index.css">
    </noscript>

    <script type="text/javascript" language="javascript">

        $(document).ready(function () {

            var scriptEditor = ace.edit("comp-script", {
                theme: "ace/theme/textmate",
                mode: "ace/mode/sh",
                value: ""
            });

            scriptEditor.setTheme("ace/theme/clouds");
            scriptEditor.session.setMode("ace/mode/sh");
            scriptEditor.setReadOnly(true);

            var term = new Terminal();

            const fitAddon = new FitAddon.FitAddon();
            term.loadAddon(fitAddon);

            term.open(document.getElementById('console'));
            fitAddon.fit();

            window.addEventListener("resize", handleResize);

            function handleResize() {
                fitAddon.fit();
            };

            term.write('Starting \x1B[1;3;31mConsol Essence\x1B[0m $ ')

            // var ansi_up = new AnsiUp;

            dashCompDescription = new Quill('#dashCompDescription', {
                theme: 'snow',
                modules: {
                    "toolbar": true
                }
            });
            $(".ql-toolbar").hide()

            var selectedNode

            //create main tree
            $("#jstree_div").jstree({
                "core": {
                    "themes": {
                        "name": "default",
                        "dots": true,
                        "icons": true
                    },
                    "data": {
                        'url': function (node) {
                            var searchText = $("#searchInput").val();
                            return node.id === '#' ?
                                'getTree?searchSt=' + searchText :
                                'getTree';
                        },
                        'data': function (node) { return { 'id': node.id }; }
                    },
                    'check_callback': function (operation, node, node_parent, node_position, more) {
                        if (operation === "copy_node") {

                            const targetNodeId = node_parent.id;
                            const pos = node_position;
                            const targetNode = $('#jstree_div').jstree(true).get_node(targetNodeId);
                            $('#copyModal_newPosition').val(pos);

                            return showCopyModal(node, targetNodeId, targetNode);

                        }
                        return true;  //allow all other operations
                    }
                },
                "types": {
                    "code": {
                        "icon": "fa fa-code ",
                        // "a_attr": { class: " systemRow " }
                        //  "li_attr": { class: "  " }
                    },
                },
                "sort": function (a, b) {
                    a1 = this.get_node(a);
                    b1 = this.get_node(b);
                    return (a1.original.sort < b1.original.sort) ? -1 : 1;

                },
                "state": { "key": "myTree" },
                "dnd": {
                    check_while_dragging: false,
                    always_copy: true,
                    large_drop_target: true
                },
                "plugins": ["sort", "state", "types", "dnd", "wholerow"]
            }).on('create_node.jstree', function (e, data) {
                //console.log('saved');
            }).on('refresh.jstree', function (e, data) {
                $('#jstree_div').jstree('select_node', selectedNode);
                let nd = $('#jstree_div').jstree(true).get_node(selectedNode, true)
                if (nd.children) {
                    $('#jstree_div').jstree(true).get_node(selectedNode, true).children('.jstree-anchor').focus()
                }

            });

            //tree click
            $('#jstree_div').on("select_node.jstree", function (e, data) {
                selectedNode = data.selected[0]

                $.get('/getTree', { id: selectedNode }, function (data) {
                    renderComp(data[0]);
                });
            });

            $("#newChildBtn").on("click", function () {
                newComp(selectedNode)
            })
            $("#newBtn").on("click", function () {
                newComp("#")
            })
            function newComp(parent) {

                let id = ""
                let text = "New Component"
                let script = ""

                let mydata = { "id": id, "parent": parent, "text": text, "script": script }

                $.ajax({
                    type: 'post',
                    contentType: "application/json",
                    url: '/saveComp',
                    data: JSON.stringify(mydata),
                    success: function (data) {
                        readComp()

                        let id = data
                        selectedNode = id

                        $('#jstree_div').jstree("deselect_all");
                        $('#jstree_div').jstree(true).refresh();
                    }
                }).done(function (e) {
                    //console.log('copy refresh' );



                }).fail(function (e) {
                    console.log('newComp post failed');
                    console.log(e);
                    $('#jstree_div').jstree(true).refresh();
                });
            }

            $("#saveBtn").hide();
            $("#pasteBtn").hide();

            function renderComp(data) {

                if (data) {
                    let id = data.hasOwnProperty('id') ? data.id : ""
                    let parent = data.hasOwnProperty('text') ? data.parent : ""
                    let name = data.hasOwnProperty('text') ? data.text : ""
                    let script = data.hasOwnProperty('script') ? data.script : ""
                    let description = data.hasOwnProperty('description') ? data.description : ""
                    scriptEditor.session.setValue(script)

                    $("#comp-id").text(id)
                    $("#comp-parent").text(parent)
                    $("#comp-name").text(name)

                    $("#comp-name-edit").val(name)

                    dashCompDescription.enable(false);
                    if (description.hasOwnProperty("ops")) {
                        dashCompDescription.setContents(description.ops)
                    } else {
                        dashCompDescription.setContents(
                            [{ insert: description },
                            { insert: '\n' }]
                        );
                    };

                    $("#copyBtn").popover('dispose').popover({
                        animation: true,
                        content: "Copy: " + $("#comp-name").text(),
                        delay: { "show": 500, "hide": 100 },
                        trigger: 'hover',
                        placement: 'top',
                        template: '<div class="popover hoverPop" role="tooltip"><div class="arrow hoverPopArrow"></div><h3 class="popover-header"></h3><div class="popover-body"></div></div>'
                    });

                } else {
                    console.log("Error: No render data for component")
                }


            }

            $("#saveBtn").on("click", function () {
                saveComp()
            });

            function saveComp() {
                let id = $("#comp-id").text()
                let text = $("#comp-name-edit").val()
                let script = scriptEditor.getValue()
                let description = dashCompDescription.getContents()
                let mydata = { "id": id, "text": text, "description": description, "script": script }

                $.ajax({
                    type: 'post',
                    contentType: "application/json",
                    url: '/saveComp',
                    data: JSON.stringify(mydata)
                }).done(function (e) {
                    //console.log('copy refresh' );
                    $("#comp-name").text($("#comp-name-edit").val())

                    readComp()

                }).fail(function (e) {
                    console.log('saveComp post failed');
                    console.log(e);
                    $('#jstree_div').jstree(true).refresh();
                });

            }

            function readComp() {

                $("#comp-name").fadeIn(0.3)
                $("#comp-name-edit").fadeOut(0.3)

                scriptEditor.renderer.$cursorLayer.element.style.display = "";
                scriptEditor.setReadOnly(true);

                dashCompDescription.enable(false);
                $(".ql-toolbar").hide()

                $("#editBtn").show();
                $("#newChildBtn").show();
                $("#saveBtn").hide();
                $("#deleteBtn").show();
                $("#copyBtn").show();
                if (currentCopyObj.id) {
                    $("#pasteBtn").show();
                }
                $("#runBtn").show();
                $('#jstree_div').jstree(true).refresh(true);

            }

            $("#editBtn").on("click", function () {
                editComp()
            });

            function editComp() {
                $("#editBtn").hide();
                $("#newChildBtn").hide();
                $("#saveBtn").show();
                $("#deleteBtn").hide();
                $("#copyBtn").hide();
                $("#pasteBtn").hide();
                $("#runBtn").hide();

                scriptEditor.renderer.$cursorLayer.element.style.display = "";
                scriptEditor.setReadOnly(false);

                dashCompDescription.enable(true);
                $(".ql-toolbar").show(0.3)

                $("#comp-name-edit").val($("#comp-name").text())
                $("#comp-name").fadeOut(0.3)
                $("#comp-name-edit").fadeIn(0.3)
            }

            $("#deleteBtn").on("click", function () {
                deleteComp()
            });

            function deleteComp() {

                $('#delModal').modal('show');
            }

            var copiedText = ""
            $("#copyBtn").on("click", function () {
                copiedText = $("#comp-name").text()

                currentCopyObj = { "id": selectedNode, "lib": "working", "name": $("#comp-name").text() };
                $("#pasteBtn").show();
                $("#pasteBtn").popover('dispose').popover({
                    animation: true,
                    content: "Paste: " + copiedText,
                    delay: { "show": 500, "hide": 100 },
                    trigger: 'hover',
                    placement: 'top',
                    template: '<div class="popover hoverPop" role="tooltip"><div class="arrow hoverPopArrow"></div><h3 class="popover-header"></h3><div class="popover-body"></div></div>'
                });
                $(this).popover('dispose').popover({
                    animation: true,
                    content: "Copied: " + copiedText,
                    delay: { "show": 500, "hide": 100 },
                    trigger: 'hover',
                    placement: 'top',
                    template: '<div class="popover hoverPop" role="tooltip"><div class="arrow hoverPopArrow"></div><h3 class="popover-header"></h3><div class="popover-body"></div></div>'
                });
                $(this).popover("show");

            });

            var currentCopyObj = {};
            $("#pasteBtn").on("click", function () {
                const targetNodeId = selectedNode;
                const pos = 1;
                const targetNode = $('#jstree_div').jstree(true).get_node(targetNodeId);
                const fromNode = $('#jstree_div').jstree(true).get_node(currentCopyObj.id);
                $('#copyModal_newPosition').val(pos);

                showCopyModal(fromNode, targetNodeId, targetNode);
            });

            function showCopyModal(node, targetNodeId, targetNode) {

                if (targetNode.id === "#") {
                    return false;
                } else {
                    $('#copyModal_listOfIds').val(node.original.id);

                    var fromTree;
                    if (node.parents[node.parents.length - 2] === 'lib') {
                        fromTree = $('#jslibtree_div');
                        $('#copyModal_lib').val(pickedLib)
                    } else {
                        fromTree = $('#jstree_div');
                        $('#copyModal_lib').val('local')
                    }
                    const treeNode = fromTree.jstree(true).get_node(node.original.id);

                    var childs = treeNode.children_d;
                    var listOfIds = [node.original.id];
                    $("#copyInfoText").html("<b>" + node.original.text + "</b> will be copied to <b>" + targetNode.text + "</b>");

                    if (childs.length > 0) {
                        listOfIds += ';' + childs.join(';');
                        $('#copyModal_listOfIds').val(listOfIds);
                        $('#copyModalForm').show()
                    } else {
                        $('#copyModalForm').hide()
                    }

                    if (targetNode.id === "local") {
                        $('#copyModal_newParent').val('#')
                    } else {
                        $('#copyModal_newParent').val(targetNode.id);  //targetId
                    }

                    $('#copyModal').modal('show');
                    $('#copyChildrenCb').prop('checked', false);

                    return false;
                }
            }

            $("#copyConfirmButton").on("click", function () {
                var mydata = {};
                mydata.ids = $('#copyModal_listOfIds').val();
                mydata.parent = $('#copyModal_newParent').val();
                mydata.pos = $('#copyModal_newPosition').val();
                // mydata.lib = $('#copyModal_lib').val();

                if (!$('#copyChildrenCb').is(':checked')) {
                    if (mydata.ids.split(';').length > 1) {
                        mydata.ids = mydata.ids.split(';')[0]
                    }
                }

                $.ajax({
                    type: 'post',
                    contentType: "application/json",
                    url: '/copy',
                    data: JSON.stringify(mydata)
                }).done(function (e) {
                    //console.log('copy refresh' );
                    $('#jstree_div').jstree(true).refresh(true);
                }).fail(function (e) {
                    console.log('copy failed');
                    console.log(e);
                    $('#jstree_div').jstree(true).refresh();
                });
                $('#copyModal').modal('toggle');
            });

            $("#moveUpBtn").click(function (event) {
                //console.log("up");
                $.get('/Move', { id: selectedNode, direction: 'up' }, function (data) {
                    var newPos = data.newPos;
                    var oldPos = data.oldPos;
                    var otherId = data.otherId;
                    if (otherId !== '') {
                        var nodeInst = $('#jstree_div').jstree(true).get_node(selectedNode);
                        var otherInst = $('#jstree_div').jstree(true).get_node(otherId);
                        nodeInst.original.sort = newPos;
                        otherInst.original.sort = oldPos;
                        var parent = $("#comp-parent").text();
                        $('#jstree_div').jstree("move_node", nodeInst, parent, newPos);
                        $('#jstree_div').jstree("move_node", otherInst, parent, oldPos);
                    }
                })
            })

            $("#moveDnBtn").click(function (event) {
                //console.log("down");
                $.get('/Move', { id: selectedNode, direction: 'down' }, function (data) {
                    var newPos = data.newPos;
                    var oldPos = data.oldPos;
                    var otherId = data.otherId;
                    if (otherId !== '') {
                        var nodeInst = $('#jstree_div').jstree(true).get_node(selectedNode);
                        var otherInst = $('#jstree_div').jstree(true).get_node(otherId);
                        nodeInst.original.sort = newPos;
                        otherInst.original.sort = oldPos;
                        var parent = $("#comp-parent").text();
                        $('#jstree_div').jstree("move_node", nodeInst, parent, newPos);
                        $('#jstree_div').jstree("move_node", otherInst, parent, oldPos);
                    }
                })
            })

            $(function () {
                $("#newBtn").popover('dispose').popover({
                    animation: true,
                    content: "New Component",
                    delay: { "show": 500, "hide": 100 },
                    trigger: 'hover',
                    placement: 'top',
                    template: '<div class="popover hoverPop" role="tooltip"><div class="arrow hoverPopArrow"></div><h3 class="popover-header"></h3><div class="popover-body"></div></div>'
                });
                $("#moveUpBtn").popover('dispose').popover({
                    animation: true,
                    content: "Move Up",
                    delay: { "show": 500, "hide": 100 },
                    trigger: 'hover',
                    placement: 'top',
                    template: '<div class="popover hoverPop" role="tooltip"><div class="arrow hoverPopArrow"></div><h3 class="popover-header"></h3><div class="popover-body"></div></div>'
                });
                $("#moveDnBtn").popover('dispose').popover({
                    animation: true,
                    content: "Move Down",
                    delay: { "show": 500, "hide": 100 },
                    trigger: 'hover',
                    placement: 'top',
                    template: '<div class="popover hoverPop" role="tooltip"><div class="arrow hoverPopArrow"></div><h3 class="popover-header"></h3><div class="popover-body"></div></div>'
                });
                $("#runBtn").popover('dispose').popover({
                    animation: true,
                    content: "Run Script",
                    delay: { "show": 500, "hide": 100 },
                    trigger: 'hover',
                    placement: 'top',
                    template: '<div class="popover hoverPop" role="tooltip"><div class="arrow hoverPopArrow"></div><h3 class="popover-header"></h3><div class="popover-body"></div></div>'
                });
                $("#newChildBtn").popover('dispose').popover({
                    animation: true,
                    content: "New Child Component",
                    delay: { "show": 500, "hide": 100 },
                    trigger: 'hover',
                    placement: 'top',
                    template: '<div class="popover hoverPop" role="tooltip"><div class="arrow hoverPopArrow"></div><h3 class="popover-header"></h3><div class="popover-body"></div></div>'
                });
                $("#editBtn").popover('dispose').popover({
                    animation: true,
                    content: "Edit Component",
                    delay: { "show": 500, "hide": 100 },
                    trigger: 'hover',
                    placement: 'top',
                    template: '<div class="popover hoverPop" role="tooltip"><div class="arrow hoverPopArrow"></div><h3 class="popover-header"></h3><div class="popover-body"></div></div>'
                });
                $("#saveBtn").popover('dispose').popover({
                    animation: true,
                    content: "Save Component",
                    delay: { "show": 500, "hide": 100 },
                    trigger: 'hover',
                    placement: 'top',
                    template: '<div class="popover hoverPop" role="tooltip"><div class="arrow hoverPopArrow"></div><h3 class="popover-header"></h3><div class="popover-body"></div></div>'
                });
                $("#deleteBtn").popover('dispose').popover({
                    animation: true,
                    content: "Delete Component",
                    delay: { "show": 500, "hide": 100 },
                    trigger: 'hover',
                    placement: 'top',
                    template: '<div class="popover hoverPop" role="tooltip"><div class="arrow hoverPopArrow"></div><h3 class="popover-header"></h3><div class="popover-body"></div></div>'
                });
            }) //setup popups

            //Set flag if mouse is down while hovering column resize handles
            $(function () {
                var widthHandle = $('#tCol-handle');
                var widthCenterHandle = $('#iCol-handle');
                widthHandle.on('mousedown', function (e) {
                    isResizingWidth = true;
                });
                widthCenterHandle.on('mousedown', function (e) {
                    isResizingCenterWidth = true;
                });
            })

            var isResizingWidth = false
            var isResizingCenterWidth = false
            $(document).on('mousemove', function (e) {
                const container = $('#tCol');
                const centerContainer = $('#iCol');
                if (!isResizingWidth && !isResizingCenterWidth)
                    return;

                if (isResizingWidth) {
                    e.preventDefault();

                    var leftWidth = e.pageX - 8

                    container.css("flex", "0 0 " + leftWidth + "px")

                    localStorage['locTreeWidth'] = JSON.stringify({ width: leftWidth });

                }

                if (isResizingCenterWidth) {
                    e.preventDefault();

                    var centerWidth = e.pageX - $("#tCol").width() - 15

                    centerContainer.css("flex", "0 0 " + centerWidth + "px")

                    localStorage['locCenterWidth'] = JSON.stringify({ width: centerWidth });

                }

            }).on('mouseup', function (e) {
                isResizingWidth = false;
                isResizingCenterWidth = false;
            });

            if (!localStorage['locTreeWidth']) {
                $('#tCol').css("flex", "0 0 330px")
            } else {
                let w = JSON.parse(localStorage['locTreeWidth']).width
                $('#tCol').css("flex", "0 0 " + w + "px")
            }
            if (!localStorage['locCenterWidth']) {
                $('#iCol').css("flex", "0 0 330px")
            } else {
                let w = JSON.parse(localStorage['locCenterWidth']).width
                $('#iCol').css("flex", "0 0 " + w + "px")
            }

            function hideThings(fields) {
                fields.split(';').forEach(function (field) {
                    var fieldObj = $("#" + field);
                    if (fieldObj) {
                        fieldObj.hide();
                    }
                })
            }

            //remove component
            $("#delConfirmButton").on("click", function () {

                // clearJobFields();
                // clearSysFields();

                var mydata = {};
                mydata.ids = selectedNode;

                var tree = $('#jstree_div');

                var treeNode = tree.jstree(true).get_node(selectedNode);
                var childs = treeNode.children_d;
                var parent = treeNode.parent;
                var listOfIds = selectedNode;
                if (childs.length > 0) {
                    listOfIds += ';' + childs.join(';');
                }
                mydata.ids = listOfIds

                $.ajax({
                    type: 'post',
                    contentType: "application/json",
                    url: '/remove',
                    data: JSON.stringify(mydata),
                    selectedNode: selectedNode,
                    parent: parent
                }).done(function (data) {
                    //console.log(data);

                    tree.jstree(true).delete_node(this.selectedNode);
                    tree.jstree(true).select_node(this.parent, false);
                    tree.jstree(true).redraw(true);

                }).fail(function (e) {
                    console.log('remove refresh fail');
                    console.log(e);
                    $('#jstree_div').jstree(true).refresh()
                });

                $('#delModal').modal('toggle');
            });


            //settings
            $("#settingsBtn").on("click", function () {
                $('#settingsModal').modal('show');
            })
            $("#settingsSaveButton").on("click", function () {
                let settings =
                {
                    "settingsHostName1": $("#settingsHostName1").val(),
                    "settingsLoginName1": $("#settingsLoginName1").val(),
                    "settingsKey1": $("#settingsKey1").val()
                }
                localStorage['settings'] = JSON.stringify(settings)
            })
            if (localStorage['settings']) {
                let settings = JSON.parse(localStorage['settings'])
                $("#settingsHostName1").val(settings.settingsHostName1)
                $("#settingsLoginName1").val(settings.settingsLoginName1)
                $("#settingsKey1").val(settings.settingsKey1)
            }

            //run
            $("#runBtn").click(function (event) {
                $("#idToBeRun").val(selectedNode)
                $('#runModal').modal('show');
            });

            $("#runConfirmButton").click(function (event) {

                let rc = true
                if ($('#runChildrenCb').is(':checked')) {
                    rc = true
                } else {
                    rc = false
                }

                runJob($("#idToBeRun").val(), rc);
                $('#runModal').modal('toggle');
            });


            var accessToken = ""
            function runJob(ids, runChildren) {

                var settings
                if (localStorage['settings']) {
                    settings = JSON.parse(localStorage['settings'])
                } else {
                    console.log("ERROR: Local storage 'Settings' not found")
                    return (1)
                }

                var formData = new FormData();

                formData.append('runChildren', runChildren);

                formData.append('ids', ids);

                settingsHostName = settings.settingsHostName1 ? settings.settingsHostName1 : ""
                settingsLoginName = settings.settingsLoginName1 ? settings.settingsLoginName1 : ""
                settingsKey = settings.settingsKey1 ? settings.settingsKey1 : ""
                formData.append('settingsHostName', settingsHostName);
                formData.append('settingsLoginName', settingsLoginName);
                formData.append('settingsKey', settingsKey);

                formData.append('token', accessToken);

                var currentRespText = ""
                var remainder = ""

                $.ajax({
                    url: '/run',
                    processData: false,
                    contentType: false,
                    type: 'POST',
                    data: formData,
                    xhr: function () {

                        var xhr = $.ajaxSettings.xhr();
                        xhr.onprogress = function e() {

                            accessToken = xhr.getResponseHeader("access-token")

                            var rText = xhr.responseText

                            var rTextNew = rText.substr(currentRespText.length)
                            currentRespText = rText
                            // var rTextNew = remainder + ansi_up.ansi_to_html(rTextNew) //.replace(/(?:\r\n|\r|\n)/g, '<br>');
                            var rTextNew = remainder + rTextNew

                            // $("#console").append(rTextNew.replace(/ /g, "&nbsp;"))
                            // $("#console").append(rTextNew)

                            term.write(rTextNew)

                            // $('#console')[0].scrollTop = $('#console')[0].scrollHeight

                            const console = document.querySelector("#console");
                            // console.focus()
                            // setEndOfContenteditable(console)
                        };

                        xhr.onreadystatechange = () => {
                            if (xhr.readyState === xhr.HEADERS_RECEIVED) {
                                accessToken = xhr.getResponseHeader("access-token")
                            }
                        };

                        return xhr;
                    },
                    success: function (output, status, xhr) {
                    }
                }).done(function (e) {

                }).fail(function (e) {

                });
            }

            $("#search-icon").on("click", function () {
                $('#jstree_div').jstree(true).refresh(true);
            });
            $("#searchInput").on('keyup', function (e) {
                if (e.keyCode == 13) {
                    $('#jstree_div').jstree(true).refresh(true);
                }
            });

            function setEndOfContenteditable(elem) {
                // put cursor at end of console
                let sel = window.getSelection()
                sel.selectAllChildren(elem)
                sel.collapseToEnd()
            }

            // $("#console").on("click", function () {
            //     // $("#console").append(" ")
            //     // const console = document.querySelector("#console")
            //     // setEndOfContenteditable(console)
            // })

            term.attachCustomKeyEventHandler((key) => {
                if (key.code === 'KeyV') {
                    if (key.metaKey) {
                        $("#console").focus()
                        // return false;
                        navigator.clipboard
                            .readText()
                            .then(
                                (clipText) => (
                                    ws.send(JSON.stringify({ "token": accessToken, "key": clipText }))

                                ),
                            );
                    }
                }
                return true;
            });

            term.onKey((key, ev) => {

                if (ws) {

                    ws.send(JSON.stringify({ "token": accessToken, "key": key.key }));
                }
                console.log("keypress " + key)

            });

            var formData = new FormData();

            var ws = new WebSocket('wss://consol.cybera.ca:8443');

            ws.addEventListener('open', function (e) {
                ws.addEventListener('message', function (e) {
                    console.log('received:', e.data);
                });

                // ws.send('something else');
            });


        });

    </script>
</head>


<body class="index-page">
    <div id="navbarNav-outer">

        <nav id="navbarNav" class="col-md-10 offset-md-1 navbar navbar-expand-md navbar-light pop-bar">
            <span><a class="navbar-brand" href="/">
                    <b>Consol Essence</b></a></span>

            <button class="fancy-toggler navbar-toggler" type="button" data-toggle="collapse"
                data-target="#navbarNav-collapsibleNavbar">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse" id="navbarNav-collapsibleNavbar">
                <ul class="navbar-nav ml-auto">

                    <!-- <li id="faq-link" class="nav-item">
                        <a href="/faq">
                            <i class="material-icons"></i>FAQ
                        </a>
                    </li>  -->

                    <!-- %insertPopNavItem% -->
                </ul>
            </div>
        </nav>
    </div>

    <div id="MainRaisedCol" class="wrapper scroller">

        <div class="main">
            <div id="rrow" class="rrow">
                <div id="tCol" class=" tCol">
                    <div class="tCol-top-row">
                        <div class="button-row">
                            <i id="newBtn" class="fa fa-plus fa-fw"></i>
                            <i id="moveUpBtn" class="fa fa-chevron-up fa-fw"></i>
                            <i id="moveDnBtn" class="fa fa-chevron-down fa-fw"></i>
                        </div>
                        <div id="compSearch" class="form-group search-group">
                            <input class="form-control form-custom searchInput" placeholder="" id="searchInput">
                            <i id="search-icon" class="fa fa-search  fa-fw search-icon"></i>
                        </div>
                    </div>


                    <div id="jstree_div" class="jstree-default">
                    </div>
                </div>

                <div id="tCol-handle" class="tCol-handle">
                </div>

                <div id="iCol" class="iCol">
                    <div class="button-row">
                        <i id="runBtn" class="fa fa-play fa-fw"></i>
                        <i id="newChildBtn" class="fa fa-plus fa-fw"></i>
                        <i id="editBtn" class="fa fa-pencil fa-fw"></i>
                        <i id="saveBtn" class="fa fa-floppy-o fa-fw"></i>
                        <i id="deleteBtn" class="fa fa-minus fa-fw"></i>
                        <i id="copyBtn" class="fa fa-copy fa-fw"></i>
                        <i id="pasteBtn" class="fa fa-paste fa-fw"></i>
                    </div>

                    <div id="comp-id" style="display:none;"></div>
                    <div id="comp-parent" style="display:none;"></div>
                    <div id="comp-name-container">
                        <div id="comp-name"></div>
                        <input type="text" id="comp-name-edit" style="display:none;">
                    </div>
                    <div id="dashCompDescription"></div>
                    <div id="comp-script" style="height: 400px"></div>

                </div>
                <div id="iCol-handle" class="iCol-handle">
                </div>

                <div id="cCol" class="cCol">
                    <div id="connectPick">
                        <button class="dropdown-toggle templateTypeDropdownButton" type="button"
                            id="dropdownTemplateTypeButton0" data-toggle="dropdown" aria-haspopup="true"
                            aria-expanded="false">javascript</button>
                        <div id="dropdownTemplateTypeMenu0" class="dropdown-menu dropdownTemplateTypeMenu"
                            aria-labelledby="dropdownTemplateTypeButton0" x-placement="bottom-start"
                            style="position: absolute; transform: translate3d(76px, 379px, 0px); top: 0px; left: 0px; will-change: transform;">
                            <div><a id="templateTypeDropdownItem00" class="dropdown-item templateTypeDropdownItem"
                                    href="#" data-type="javascript" data-index="0">javascript </a></div>
                            <div><a id="templateTypeDropdownItem00" class="dropdown-item templateTypeDropdownItem"
                                    href="#" data-type="sh" data-index="0">sh </a></div>
                            <div><a id="templateTypeDropdownItem00" class="dropdown-item templateTypeDropdownItem"
                                    href="#" data-type="text" data-index="0">text </a></div>
                            <div><a id="templateTypeDropdownItem00" class="dropdown-item templateTypeDropdownItem"
                                    href="#" data-type="css" data-index="0">css </a></div>
                            <div><a id="templateTypeDropdownItem00" class="dropdown-item templateTypeDropdownItem"
                                    href="#" data-type="ejs" data-index="0">ejs </a></div>
                            <div><a id="templateTypeDropdownItem00" class="dropdown-item templateTypeDropdownItem"
                                    href="#" data-type="html" data-index="0">html </a></div>
                            <div><a id="templateTypeDropdownItem00" class="dropdown-item templateTypeDropdownItem"
                                    href="#" data-type="json" data-index="0">json </a></div>
                        </div>
                    </div>

                    <div id="console-button-row">
                        <i id="conectBtn" class="fa fa- fa-fw"></i>
                        <i id="settingsBtn" class="fa fa-gear fa-fw"></i>
                    </div>
                    <div id="conTxt">
                        <div id="console"></div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</body>


<div id="delModal" class="modal fade" role="dialog">
    <div class="modal-dialog modal-del-dialog">
        <nav class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title"><i class="fa fa-minus-square-o fa-fw"></i>Remove</h4>
            </div>

            <div id='delConfirmationBody' class="modal-body">
                Are you sure you want to remove this component and all children?
            </div>
            <div class="modal-footer">
                <button type="button" id="delConfirmButton" class="btn btn-default jobFormbtn">Remove</button>
                <button type="button" class="btn btn-default jobFormbtn" data-dismiss="modal">Cancel</button>
            </div>
        </nav>
    </div>
</div>

<div id="copyModal" class="modal fade" role="dialog">
    <div class="modal-dialog modal-run-dialog">
        <nav class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title"><i class="fa fa-code-fork fa-fw"></i>Copy</h4>
            </div>
            <div id='copyConfirmationBody' class="modal-body">
                <div id="copyInfoText" class="text-info"></div>
                <form class="form" id="copyModalForm">
                    <div class="form-group">
                        <div class="radio">
                            <label class="build-label"><input name="copyChildrenCb" id="copyChildrenCb" value="yes"
                                    type="checkbox" />Copy all children?</label>
                        </div>
                    </div>
                </form>
                <br />

                <input type="hidden" id="copyModal_listOfIds">
                <input type="hidden" id="copyModal_newParent">
                <input type="hidden" id="copyModal_newPosition">
                <input type="hidden" id="copyModal_lib">
            </div>
            <div class="modal-footer">
                <button type="button" id="copyConfirmButton" class="btn btn-default jobFormbtn">Copy</button>
                <button type="button" class="btn btn-default jobFormbtn" data-dismiss="modal">Cancel</button>
            </div>
        </nav>
    </div>
</div>

<div id="settingsModal" class="modal fade" role="dialog">
    <div class="modal-dialog modal-run-dialog">
        <nav class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title"><i class="fa fa-gear fa-fw"></i>Settings</h4>
            </div>
            <div id='settingsConfirmationBody' class="modal-body">
                <div id="settingsInfoText" class="text-info"></div>
                <form class="form" id="settingsModalForm">
                    <div class="label">Login Name</div>
                    <div class="settingsInput"><input id="settingsLoginName1" type="text"></div>
                    <div class="label">Host Name</div>
                    <div class="settingsInput"><input id="settingsHostName1" type="text"></div>
                    <div class="label">Private Key</div>
                    <div class="settingsInput"><textarea id="settingsKey1"></textarea></div>
                    <!-- <div class="form-group">
                        <div class="radio">
                            <label class="build-label"><input name="copyChildrenCb" id="copyChildrenCb" value="yes"
                                    type="checkbox" />Copy all children?</label>
                        </div>
                    </div> -->
                </form>
                <br />
            </div>
            <div class="modal-footer">
                <button type="button" id="settingsSaveButton" data-dismiss="modal"
                    class="btn btn-default jobFormbtn">Save</button>
                <button type="button" id="settingsCloseButton" data-dismiss="modal"
                    class="btn btn-default jobFormbtn">Close</button>
            </div>
        </nav>
    </div>
</div>

<div id="runModal" class="modal fade" role="dialog">
    <div class="modal-dialog modal-run-dialog">
        <nav class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title"><i class="fa fa-play fa-fw"></i>Run Script</h4>
                <label id="buildModalTitleName"></label>
            </div>
            <div id='runConfirmationBody' class="modal-body run-model-body">
                <form class="form">
                    <input name="idToBeRun" id="idToBeRun" type="hidden" />
                    <div class="form-group" id="runChildrenGroup">
                        <span class="model-label"><input name="runChildrenCb" id="runChildrenCb" value="yes"
                                type="checkbox" checked />Run children?</span>
                    </div>
                </form>
            </div>

            <div class="modal-footer">
                <button type="button" id="runConfirmButton" class="btn btn-default jobFormbtn">Run</button>
                <button type="button" class="btn btn-default jobFormbtn" data-dismiss="modal">Cancel</button>
            </div>
        </nav>
    </div>
</div>


</html>