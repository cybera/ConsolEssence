<!doctype html>
<html lang="en">

<head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/png" href="images/cybera_icon.png">
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1" />

    <title>dsManager</title>

    <meta name="description" content="Home page for Data Science Manager">

    <!--     Fonts and icons     -->
    <link rel="stylesheet" href="https://fonts.googleapis.com/icon?family=Material+Icons" />
    <link rel="stylesheet" type="text/css" href="https://fonts.googleapis.com/css?family=Roboto:300,400,500,700" />

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/font-awesome/latest/css/font-awesome.min.css" as="font"
        onload="this.onload=null;this.rel='stylesheet'">

    <!-- CSS Files -->

    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/4.5.3/css/bootstrap.min.css"
        integrity="sha512-oc9+XSs1H243/FRN9Rw62Fn8EtxjEYWHXRvjS43YtueEewbS6ObfXcJNyohjHqVKFPoXXUxwc+q1K7Dee6vv9g=="
        crossorigin="anonymous" />

    <script src="https://code.jquery.com/jquery-3.5.1.js" crossorigin="anonymous"></script>
    <script src="https://ajax.googleapis.com/ajax/libs/jqueryui/1.12.0/jquery-ui.min.js" defer></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-awesome-cursor/0.3.1/jquery.awesome-cursor.min.js"
        integrity="sha512-mR4OOU/ky22CpIhlxfBwQ2ckKWapf+g2+1sbUCkVtFaaRcVLpytf0ERgrXXUUYgFOdbehWOJJdW7QzYJ7XlLiA=="
        crossorigin="anonymous" defer></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.9/umd/popper.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/4.5.3/js/bootstrap.min.js"
        integrity="sha512-8qmis31OQi6hIRgvkht0s6mCOittjMa9GMqtK9hes5iEQBQE/Ca6yGE5FsW36vyipGoWQswBj/QBm2JR086Rkw=="
        crossorigin="anonymous"></script>

    <!-- <script src="/jstree-3.3.15/dist/jstree.js"></script>
    <link rel="stylesheet" href="/jstree-3.3.15/dist/themes/default/style.min.css">

    <script src="https://www.unpkg.com/ace-builds@latest/src-noconflict/ace.js"></script>

    <script src="//cdn.quilljs.com/1.3.6/quill.min.js"></script>
    <link href="//cdn.quilljs.com/1.3.6/quill.snow.css" rel="stylesheet">-->

    <link rel="stylesheet" href="/xterm/xterm.css" />
    <script src="/xterm/xterm.js"></script>
    <script src="/xterm/xterm-addon-fit.js"></script>




    <script type="text/javascript"
        src="https://cdn.jsdelivr.net/npm/handsontable/dist/handsontable.full.min.js"></script>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/handsontable/dist/handsontable.full.min.css" />

    <!-- <link rel="stylesheet" type="text/css"
        href="https://cdn.jsdelivr.net/npm/handsontable-pro@latest/dist/handsontable.full.min.css">
    <link rel="stylesheet" type="text/css" href="https://handsontable.com/static/css/main.css"> -->

    <link rel="stylesheet" href="/clientCSS/dsman.css">


    <noscript>
        <link rel="stylesheet" href="/clientCSS/index.css">
    </noscript>

    <script type="text/javascript" language="javascript">

        $(document).ready(function () {
            var userID = "0"

            //settings
            if (localStorage['settings']) {
                let settings = JSON.parse(localStorage['settings'])
                $("#settingsHostName1").val(settings.settingsHostName1)
                $("#settingsLoginName1").val(settings.settingsLoginName1)
                $("#settingsKey1").val(settings.settingsKey1)
                $("#userID").text(settings.userID)
                userID = settings.userID

            } else {
                $('#newUserModal').modal('show')
                $('#newUserModal').on('hidden.bs.modal', function () {
                    if (!localStorage['settings']) {
                        $.get('/newUser', function (dataObj) {
                            userID = dataObj.userID
                            localStorage['settings'] = JSON.stringify({ "userID": userID })
                            $('#jstree_div').jstree('select_node', 'ul > li:first')
                        })
                    }
                })
            }
            $("#settingsBtn").on("click", function () {
                $('#settingsModal').modal('show');
            })
            $("#settingsSaveButton").on("click", function () {

                let settings =
                {
                    "settingsHostName1": $("#settingsHostName1").val(),
                    "settingsLoginName1": $("#settingsLoginName1").val(),
                    "settingsKey1": $("#settingsKey1").val(),
                    "userID": userID
                }
                localStorage['settings'] = JSON.stringify(settings)
            })

            const container = document.querySelector('#grid');

            const hot = new Handsontable(container, {
                // stretchH: 'all',
                width: 250,
                height: '103%',
                // autoWrapRow: true,
                // height: 487,
                maxRows: 22000,
                colWidths: [240, 240],
                manualColumnResize: true,
                // hiddenColumns: true,
                data: [],
                rowHeaders: false,
                colHeaders: false,
                filters: true,
                // enable the column menu
                // dropdownMenu: true,
                licenseKey: 'non-commercial-and-evaluation', // for non-commercial use only
                cells: function (row, col) {
                    var cellPrp = {};
                    if (col === 0) {
                        cellPrp.renderer = myBtns;
                        cellPrp.readOnly = true;
                    }
                    return cellPrp
                },
                afterOnCellMouseDown: function (event, cords, TD) {
                    if (event.srcElement.className.indexOf('myBt') < 0) {
                        return;
                    }
                    listClick(event.target.attributes["data-id"].value);
                    // console.log(event, cords, TD)
                }
            });

            function listClick(id, jobID) {

                runJob([onclickJob], false, { "id": id })
            }

            function myBtns(instance, td, row, col, prop, value, cellProperties) {
                Handsontable.renderers.TextRenderer.apply(this, arguments);
                const rowObj = JSON.parse(value)
                td.innerHTML = '<div class="myBt bt-' + row + '" data-id="' + rowObj[0] + '"   data-jobID="' + '' + '">' + rowObj[1] + '</div>';
                // console.log(value);
            }

            // const hiddenColumnsPlugin = hot.getPlugin('hiddenColumns');

            var ws = new WebSocket('wss://dsstack.cybera.ca:8443')

            function wsEvents(ws) {

                ws.addEventListener('open', function (e) {
                    ws.addEventListener('message', function (e) {

                        // console.log('received:', e.data);
                        const data = JSON.parse(e.data)
                        accessToken = data.token ? data.token : accessToken

                        if (data.message) {
                            term.write(data.message)
                        }
                        if (data.status) {
                            if (data.status === "up") {
                                $("#connectBtn").addClass("up").removeClass("down")
                            } else {
                                $("#connectBtn").addClass("down").removeClass("up")
                            }
                        }
                        if (data.varName) {
                            const varName = data.varName
                            if (varName == "userList") {
                                try {
                                    $("#spinner").css({
                                        "transition": "opacity .5s",
                                        "opacity": "0"
                                    })

                                    const varVal = JSON.parse(data.varVal)

                                    var varValPlus = []
                                    varVal.forEach(element => {
                                        varValPlus.unshift({ data: JSON.stringify([element.ID, element.Name]) })
                                    });

                                    hot.loadData(varValPlus)

                                    // hot.updateSettings({
                                    //     colHeaders: ['User Name'],
                                    // });
                                    // hiddenColumnsPlugin.hideColumn(0);

                                    hot.render();
                                    $("#buildCodeSearchInput").focus()

                                    $("#userListSection").css({
                                        "transition": "opacity .5s",
                                        "opacity": "1"
                                    })


                                } catch (e) {
                                    console.log("Error: " + e)
                                }
                            }
                            if (varName == "userShow") {
                                try {
                                    const varVal = JSON.parse(data.varVal)
                                    if (varVal.id) {
                                        let ele = $('#userShow-' + varVal.id)
                                        // scrollTarget = '#userShow-' + varVal.id
                                        if (ele.length < 1) {
                                            ele = $("#userShowTemplateOuter").clone(false)
                                            ele.insertBefore("#spinner")
                                            ele.find(".userShow").removeClass("hidden")
                                            ele.attr('id', 'userShow-' + varVal.id)
                                        } else {

                                        }
                                        $('#managerPanels').stop().animate({
                                            'scrollTop': $("#managerPanels").height()
                                        }, 200, 'swing', function () {

                                        });

                                        ele.find(".userShowName").text(varVal.name)
                                        ele.find(".userShowEmail").text(varVal.email)
                                        ele.find(".userShowEnabled").text(varVal.enabled)
                                        ele.find(".userShowId").text(varVal.id)

                                    } else {
                                        ele.find(".userShowName").text("Error returned")
                                    }

                                } catch (e) {
                                    console.log("Error: " + e)
                                }
                            }
                            if (varName == "userProjectList") {
                                try {
                                    const varVal = JSON.parse(data.varVal)
                                    const props = data.props
                                    const compVars = data.compVars
                                    const userid = props.id
                                    let userEle = $("#userShow-" + userid)
                                    // scrollTarget = '#userShow-' + userid

                                    userEle.find(".projectListLabel").text("Project List:")
                                    userEle.find(".projectListPanel").html()
                                    varVal.every((element, index, array) => {

                                        projshowid = compVars["projShowID"] ? compVars["projShowID"].value : ""
                                        userEle.find(".projectListPanel").append(
                                            '<div id="userProjRow">' +
                                            '<div id="userProj-' + userid + '-' + element.ID + '" class="userProj"></div>' +
                                            '<div id="userProjId-' + userid + '-' + element.ID + '"  data-projID="' + element.ID + '" class="userProj userProjId" data-runJob="' + projshowid + '"></div>' +
                                            '</div>'
                                        )
                                        $('#userProj-' + userid + '-' + element.ID).text(element.Name)
                                        $('#userProjId-' + userid + '-' + element.ID).text(element.ID)

                                        $('#userProjId-' + userid + '-' + element.ID).on("click", function (event) {
                                            let jobID = $(this).attr('data-runJob');
                                            let projID = $(this).attr('data-projID');
                                            runJob([jobID], false, { "id": projID })
                                        })

                                        return true
                                    });

                                    // userEle.find(".projectListLabel").text("Project List:")
                                    // userEle.find(".projectListPanel").text(varVal)

                                } catch (e) {
                                    console.log("Error: " + e)
                                }
                            }
                            if (varName == "projectList") {
                                try {
                                    $("#spinner").css({
                                        "transition": "opacity .5s",
                                        "opacity": "0"
                                    })

                                    const varVal = JSON.parse(data.varVal)

                                    var varValPlus = []
                                    varVal.forEach(element => {
                                        varValPlus.unshift({ data: JSON.stringify([element.ID, element.Name]) })
                                    });

                                    hot.loadData(varValPlus)

                                    // hot.updateSettings({
                                    //     colHeaders: ['User Name'],
                                    // });
                                    // hiddenColumnsPlugin.hideColumn(0);

                                    hot.render();
                                    $("#buildCodeSearchInput").focus()

                                    $("#userListSection").css({
                                        "transition": "opacity .5s",
                                        "opacity": "1"
                                    })


                                } catch (e) {
                                    console.log("Error: " + e)
                                }
                            }
                            if (varName == "projectShow") {
                                try {
                                    const varVal = JSON.parse(data.varVal)
                                    if (varVal.id) {
                                        let ele = $('#projectShow-' + varVal.id)
                                        if (ele.length < 1) {
                                            ele = $("#projectShowTemplateOuter").clone(false)
                                            ele.insertBefore("#spinner")
                                            ele.find(".projectShow").removeClass("hidden")
                                            ele.attr('id', 'projectShow-' + varVal.id)
                                        }
                                        $('#managerPanels').stop().animate({
                                            'scrollTop': $("#managerPanels").height()
                                        }, 200, 'swing', function () {

                                        });

                                        ele.find(".projectShowName").text(varVal.name)
                                        ele.find(".projectShowDescription").text(varVal.description)
                                        ele.find(".projectShowEmail").text(varVal.email)
                                        ele.find(".projectShowEnabled").text(varVal.enabled)
                                        ele.find(".projectShowId").text(varVal.id)

                                    } else {
                                        ele.find(".projectShowName").text("Error returned")
                                    }

                                } catch (e) {
                                    console.log("Error: " + e)
                                }
                            }
                            if (varName == "projectServerList") {
                                try {
                                    const serverLists = JSON.parse(data.varVal)
                                    const varVal = serverLists[0]
                                    const varVal2 = serverLists[1]
                                    const props = data.props
                                    const serverid = props.id
                                    let userEle = $("#projectShow-" + serverid)

                                    userEle.find(".serverListLabel").text("Server List:")
                                    userEle.find(".serverListPanel").html()

                                    function render(varVal, cloud) {
                                        varVal.every((element, index, array) => {

                                            userEle.find(".serverListPanel").append(
                                                '<div id="projectServRow">' +
                                                '<div id="projectServ-' + serverid + '-' + element.ID + '" class="projectServ"></div>' +
                                                '<div id="projectServId-' + serverid + '-' + element.ID + '" class="projectServ projectServId"></div>' +
                                                '</div>'
                                            )
                                            $('#projectServ-' + serverid + '-' + element.ID).text(cloud + " - " + element.Name)
                                            $('#projectServId-' + serverid + '-' + element.ID).text(element.ID)
                                            return true
                                        });
                                    }
                                    render(varVal, "yyc")
                                    render(varVal2, "yeg")


                                } catch (e) {
                                    console.log("Error: " + e)
                                }
                            }

                        }
                    })
                })

                ws.onclose = function (e) {
                    $("#connectBtn").addClass("up").removeClass("down")
                };
            }
            wsEvents(ws)

            var accessToken = ""
            function runJob(ids, runChildren, props) {

                var settings
                if (localStorage['settings']) {
                    settings = JSON.parse(localStorage['settings'])
                } else {
                    console.log("ERROR: Local storage 'Settings' not found")
                    return (1)
                }
                var runData = {}

                runData["runChildren"] = runChildren
                runData["ids"] = ids
                settingsHostName = settings.settingsHostName1 ? settings.settingsHostName1 : ""
                settingsLoginName = settings.settingsLoginName1 ? settings.settingsLoginName1 : ""
                settingsKey = settings.settingsKey1 ? settings.settingsKey1 : ""
                runData["settingsHostName"] = settingsHostName
                runData["settingsLoginName"] = settingsLoginName
                runData["settingsKey"] = settingsKey
                runData["token"] = accessToken
                runData["userID"] = userID
                runData["props"] = props ? props : {}

                wsSend(runData, ws)
            }

            $("#buildCodeSearchInput").on("keyup", function (key) {

                var searchString = $("#buildCodeSearchInput").val();

                const filtersPlugin = hot.getPlugin('filters');
                filtersPlugin.removeConditions(0)
                filtersPlugin.addCondition(0, 'contains', [searchString]);
                filtersPlugin.filter();

                hot.render();
            });

            $("#connectBtn").click(function (event) {
                //     term.focus()
                if (isWsOpen(ws)) {
                    term.write("connecting....\r\n")
                    runJob([], false)
                } else {
                    accessToken = ""
                    ws = new WebSocket('wss://dsstack.cybera.ca:8443')
                    wsEvents(ws)
                    setTimeout(function () {
                        runJob([], false)
                    }, 2000)
                }


            });
            $("#connectBtn").popover('dispose').popover({
                animation: true,
                content: "Connect to host",
                delay: { "show": 500, "hide": 100 },
                trigger: 'hover',
                placement: 'top',
                template: '<div class="popover hoverPop" role="tooltip"><div class="arrow hoverPopArrow"></div><h3 class="popover-header"></h3><div class="popover-body"></div></div>'
            });

            // https://stackoverflow.com/questions/31002592/javascript-doesnt-catch-error-in-websocket-instantiation
            // ws.onclose = function (e) {
            //     $("#connectBtn").addClass("up").removeClass("down")
            // };

            var term = new Terminal({
                fontSize: 14,
                cols: 200,
                fontFamily: 'Ubuntu Mono, courier-new, courier, monospace',
            });

            const fitAddon = new FitAddon.FitAddon();
            term.loadAddon(fitAddon);

            term.open(document.getElementById('console'));

            fitAddon.fit();


            term.write('Welcome to \x1B[1;3;31mdsStack\x1B[0m $ ')

            termLightTheme = {
                "foreground": "#53676d",
                "background": "#ebebeb",
                "cursorColor": "#3a4d53",
                "selectionBackground": "#cfcebe",
                "black": "#e9e4d0",
                "red": "#d2212d",
                "green": "#489100",
                "yellow": "#ad8900",
                "blue": "#0072d4",
                "purple": "#ca4898",
                "cyan": "#009c8f",
                "white": "#909995",
                "brightBlack": "#cfcebe",
                "brightRed": "#cc1729",
                "brightGreen": "#428b00",
                "brightYellow": "#a78300",
                "brightBlue": "#006dce",
                "brightPurple": "#c44392",
                "brightCyan": "#00978a",
                "brightWhite": "#3a4d53",
                "cursor": "#3a4d53"
            }

            termDarkTheme = {
                "foreground": "#bbb",
                "background": "#000",
                "cursorColor": "#fff",
                "selectionBackground": "#cfcebe",
                "black": "#e9e4d0",
                "red": "#d2212d",
                "green": "#489100",
                "yellow": "#ad8900",
                "blue": "#0072d4",
                "purple": "#ca4898",
                "cyan": "#009c8f",
                "white": "#909995",
                "brightBlack": "#cfcebe",
                "brightRed": "#cc1729",
                "brightGreen": "#428b00",
                "brightYellow": "#a78300",
                "brightBlue": "#006dce",
                "brightPurple": "#c44392",
                "brightCyan": "#00978a",
                "brightWhite": "#3a4d53",
                "cursor": "#3a4d53"
            }

            term.options = {
                fontSize: 13,
                fontWeight: 200,
                fontFamily: 'Menlo, Consolas, "Liberation Mono", Courier, monospace',
                cursorBlink: false,
                enableBold: false
            }
            term.options.theme = termLightTheme

            var consoleState = "down"
            // $("#console").on("dblclick", function (event) {
            //     if (consoleState === 'down') {
            //         $("#console").css({
            //             "height": 'calc(400px)',
            //             "transition": "height 1s swing"
            //         })
            //         consoleState = 'up'
            //     } else {
            //         $("#console").css({
            //             "height": 'calc(40px)',
            //             "transition": "height 1s swing"
            //         })
            //         consoleState = 'down'
            //     }
            // setTimeout(function () {

            //     fitAddon.fit();

            // $('#consoleScroll').stop().animate({
            //     'scrollTop': $("#consoleScroll").height()
            // }, 100, 'swing', function () {

            // });

            // }, 1000)

            var timeoutId = 0;

            $('#console').on('mousedown', function () {
                timeoutId = setTimeout(

                    function () {
                        if (consoleState === 'down') {
                            $("#console").css({
                                "height": 'calc(400px)',
                                "transition": "height 1s swing"
                            })
                            consoleState = 'up'
                        } else {
                            $("#console").css({
                                "height": 'calc(40px)',
                                "transition": "height 1s swing"
                            })
                            consoleState = 'down'
                        }

                    }, 400)
            }).on('mouseup mouseleave', function () {
                clearTimeout(timeoutId)
                fitAddon.fit()
            });

        $("#wrapBtn").click(function (event) {
            term.focus()
            if (!$("div#console").hasClass("consoleWrap")) {
                $("div#console").addClass("consoleWrap")
                $("#wrapBtn").addClass("consoleWrapBtn")
                fitAddon.fit();
            } else {
                $("div#console").removeClass("consoleWrap")
                $("#wrapBtn").removeClass("consoleWrapBtn")
                fitAddon.fit();
            }
        });

        term.attachCustomKeyEventHandler((key) => {
            if (key.code === 'KeyV') {
                if (key.metaKey) {
                    $("#console").focus()

                    navigator.clipboard
                        .readText()
                        .then(
                            (clipText) => {
                                let sendObj = { "token": accessToken, "key": clipText }
                                wsSend(sendObj, ws)
                            }

                        )
                }
            }
            return true;
        });

        term.onKey((key, ev) => {

            if (ws) {

                let sendObj = { "token": accessToken, "key": key.key }
                wsSend(sendObj, ws)
            }
            // console.log("keypress " + key)

        });
        function isWsOpen(ws) { return ws.readyState === ws.OPEN }
        function wsSend(sendObj, ws) {
            if (isWsOpen(ws)) {
                ws.send(JSON.stringify(sendObj))
            } else {
                console.log("ws is not open")
                term.write("Not connected\r\n")
                $("#connectBtn").addClass("down").removeClass("up")
            }
        }

        currentStyleName = localStorage['theme'] ? localStorage['theme'] : 'default'

        if (currentStyleName === "dark") {
            $("#darkStyleRadioTop").prop('checked', true)
            setStyle(currentStyleName)
            hot.updateSettings({
                className: 'htDark',
                // rowHeights: 22,
                afterGetColHeader: function (col, TH) {
                    TH.className = 'darkTH'
                }
            })
        } else {
            $("#defaultStyleRadioTop").prop('checked', true)
            setStyle(currentStyleName)
            hot.updateSettings({
                className: 'htLight',
                // rowHeights: 22,
                afterGetColHeader: function (col, TH) {
                    TH.className = 'lightTH'
                }
            })
        }

        $('.stylePickTop').on('click', function (evt) {
            //evt.preventDefault();
            var pickedStyle = $(this).attr('data-ID')
            setStyle(pickedStyle);

            if (pickedStyle === "dark") {
                hot.updateSettings({
                    className: 'htDark',
                    // rowHeights: 22,
                    afterGetColHeader: function (col, TH) {
                        TH.className = 'darkTH'
                    }
                })
            } else {
                hot.updateSettings({
                    className: 'htLight',
                    // rowHeights: 22,
                    afterGetColHeader: function (col, TH) {
                        TH.className = 'lightTH'
                    }
                })
            }


            localStorage['theme'] = pickedStyle
        });

        //Apply Style
        function setStyle(name) {
            const styleName = name;

            currentStyleName = styleName;
            setEditorsStyle(styleName);

            var mydata = { styleName: styleName };

            $.ajax({
                type: 'get',
                data: mydata,
                dataType: "text",
                headers: {
                    "content-type": "application/json"
                },
                url: '/getStyle',
                success: function (data) {
                    var sheet;
                    if (lastStyleSheet) {
                        sheet = lastStyleSheet;
                    } else {
                        sheet = document.createElement('style');
                        document.body.appendChild(sheet);
                    }
                    lastStyleSheet = sheet;

                    const respJson = JSON.parse(data);
                    cssUnsortTxt = respJson.css;
                    var cssArr = cssUnsortTxt.split("}")
                    shuffleArray(cssArr);
                    cssTxt = cssArr.join("}");

                    loadCssParts(0, lastStyleSheet);
                },
                error: function (error) {
                    console.log(error)
                }
            })

        }

        function shuffleArray(array) {
            for (let i = array.length - 1; i > 0; i--) {
                const j = Math.floor(Math.random() * (i + 1));
                [array[i], array[j]] = [array[j], array[i]];
            }
        }

        function setEditorsStyle(styleName) {
            if (styleName === "dark") {
                term.options.theme = termDarkTheme
            } else {
                term.options.theme = termLightTheme
            }
        }


        var onclickJob = ""
        $.get('/getPromoted', { "userID": userID }, function (data) {
            if (data.length > 0) {
                data.every((element, index, array) => {

                    let text = element.text && element.text !== "" ? element.text : "click"
                    let icon = element.icon && element.icon !== "" ? element.icon : "users"
                    let ocj = element.onclickJob && element.onclickJob !== "" ? element.onclickJob : ""

                    btnHtml = '<div id="btn-' + element.id + '" class="btnHolder" data-target="' + element.id + '" data-listClickJob="' + element.onclickJob + '" title="">'
                    btnHtml += '<i class="fa fa-' + icon + ' fa-fw leftBtns"></i>'
                    btnHtml += '</div>'

                    $("#btnCol").append(btnHtml)

                    $('#btn-' + element.id).on('click', function () {
                        console.log("user list clicked")
                        onclickJob = ocj

                        $("#spinner").css({
                            "transition": "opacity .1s",
                            "opacity": "1"
                        })

                        runJob([element.id], false)
                    })

                    $('#btn-' + element.id).popover('dispose').popover({
                        animation: true,
                        content: text,
                        delay: { "show": 500, "hide": 100 },
                        trigger: 'hover',
                        placement: 'right',
                        template: '<div class="popover hoverPop" role="tooltip"><div class="arrow hoverPopArrow"></div><h3 class="popover-header"></h3><div class="popover-body"></div></div>'
                    });

                    return true
                })



            }
        })

        });

        var cssTxt = "";
        var cssUnsortTxt = "";
        var currentStyleName = ""
        var lastStyleSheet

        function loadCssParts(part, sheet) {

            var cssTxtPart = cssTxt.split("}")[part]
            var totRows = cssTxt.split("}").length
            if (totRows > part) {
                sheet.innerHTML += cssTxtPart + "}"
                setTimeout('loadCssParts(' + (part + 1).toString() + ', lastStyleSheet)', 500 / totRows);
            } else {
                sheet.innerHTML = "";
                sheet.innerHTML = cssUnsortTxt
            }
        }

    </script>
</head>


<body class="index-page">
    <div id="navbarNav-outer">

        <nav id="navbarNav" class="navbar navbar-light pop-bar">
            <span>
                <a class="navbar-brand" href="/"><b><span id="navTitle">dsManager</span></b></a>
            </span>

            <!-- <div id="stylePickMenu">
                <span class="radio stylePickTop" data-id="default">
                    <label><input type="radio" id="defaultStyleRadioTop" name="setupRadio" checked><i
                            class='fa fa-sun-o fa-fw '></i></label>
                </span>
                <span class="radio stylePickTop" data-id="dark">
                    <label><input type="radio" id="darkStyleRadioTop" name="setupRadio"> <i
                            class='fa  fa-moon-o fa-fw '></i></label>
                </span>
            </div> -->
            <div class="navbarNavBtnRow">
                <i id="connectBtn" class="fa fa-power-off fa-fw"></i>
                <i id="settingsBtn" class="fa fa-gear fa-fw"></i>
            </div>
        </nav>
    </div>

    <div id="MainRaisedCol" class="wrapper scroller">

        <div class="main">
            <div id="btnCol">
                <!-- <div id="userListBtn" class="btnHolder"><i class="fa fa-users fa-fw leftBtns"></i></div>
                <div id="projectListBtn" class="btnHolder"><i class="fa fa-briefcase fa-fw leftBtns"></i></div> -->
            </div>

            <div id="mainCol">
                <!-- <div id="userBtnRow">
                    <div id="userListBtn" class="usertBtn">User List</div>
                </div> -->
                <div id="Manager" class="manager">
                    <div id="userList">
                        <div id="userListSection">
                            <div id="buildCodeSearchRow">
                                <input class="form-control searchInput buildCodeSearchInput" id="buildCodeSearchInput"
                                    type="text">
                            </div>
                            <div id="grid"></div>
                        </div>

                    </div>

                    <div id="workingSection">
                        <div id="managerPanels">
                            <i id='spinner' class="fa fa-spinner fa-pulse fa-3x fa-fw"></i>
                        </div>
                        <div id="consoleScroll">
                            <div id="console"></div>
                        </div>

                    </div>

                </div>
            </div>


        </div>
    </div>
</body>

<div id="settingsModal" class="modal fade" role="dialog">
    <div class="modal-dialog modal-run-dialog">
        <nav class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title"><i class="fa fa-gear fa-fw"></i>Settings</h4>
            </div>
            <div id='settingsConfirmationBody' class="modal-body">
                <div id="settingsInfoText" class="text-info"></div>
                <form class="form" id="settingsModalForm">
                    <div class="label">Login Name</div>
                    <div class="settingsInput"><input id="settingsLoginName1" type="text"></div>
                    <div class="label">Host Name</div>
                    <div class="settingsInput"><input id="settingsHostName1" type="text"></div>
                    <div class="label">Private Key</div>
                    <div class="settingsInput"><textarea id="settingsKey1"></textarea></div>
                    <div class="label">User ID</div>
                    <div class="">
                        <div id="userID"></div>
                    </div>

                </form>
                <br />
                <div class="label">Theme</div>
                <div id="stylePickMenu">
                    <span class="radio stylePickTop" data-id="default">
                        <label><input type="radio" id="defaultStyleRadioTop" name="setupRadio" checked><i
                                class='fa fa-sun-o fa-fw '></i></label>
                    </span>
                    <span class="radio stylePickTop" data-id="dark">
                        <label><input type="radio" id="darkStyleRadioTop" name="setupRadio"> <i
                                class='fa  fa-moon-o fa-fw '></i></label>
                    </span>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" id="settingsSaveButton" data-dismiss="modal"
                    class="btn btn-default jobFormbtn">Save</button>
                <button type="button" id="settingsCloseButton" data-dismiss="modal"
                    class="btn btn-default jobFormbtn">Close</button>
            </div>
        </nav>
    </div>
</div>

<div id="userShowTemplateOuter" class="userShowOuter">
    <div class="userShow hidden">
        <div class="nameRow">
            <div class="userShowLabel">User:</div>
            <div class="userShowName"></div>
        </div>
        <div class="userShowInfo">
            <div class="panelTop">
                <div class="panelLCol">
                    <!-- <div class="panelRow">
                </div> -->
                    <div class="panelRow">
                        <div class="infoPanelLabel">Enabled: </div>
                        <div class="infoPanel userShowEnabled"></div>
                    </div>
                    <div class="panelRow">
                        <div class="infoPanelLabel">Email: </div>
                        <div class="infoPanel userShowEmail"></div>
                    </div>
                    <div class="panelRow">
                        <div class="infoPanelLabel">ID: </div>
                        <div class="infoPanel userShowId"></div>
                    </div>
                </div>
                <!-- <div class="panelRCol">
            </div> -->
            </div>
            <div class="infoPanel projectListHolder">
                <div class="infoPanel projectListLabel"></div>
                <div class="infoPanel projectListPanel"></div>
            </div>
        </div>
    </div>
</div>

<div id="projectShowTemplateOuter" class="projectShowOuter">
    <div class="projectShow hidden">
        <div class="nameRow">
            <div class="projectShowLabel">Project:</div>
            <div class="projectShowName"></div>
        </div>
        <div class="projectShowInfo">
            <div class="panelTop">
                <div class="panelLCol">
                    <!-- <div class="panelRow">
                </div> -->
                    <div class="panelRow">
                        <div class="infoPanelLabel">Enabled: </div>
                        <div class="infoPanel projectShowEnabled"></div>
                    </div>
                    <div class="panelRow">
                        <div class="infoPanelLabel">Email: </div>
                        <div class="infoPanel projectShowEmail"></div>
                    </div>
                    <div class="panelRow">
                        <div class="infoPanelLabel">Description: </div>
                        <div class="infoPanel projectShowDescription"></div>
                    </div>
                    <div class="panelRow">
                        <div class="infoPanelLabel">ID: </div>
                        <div class="infoPanel projectShowId"></div>
                    </div>
                </div>
                <!-- <div class="panelRCol">
            </div> -->
            </div>
            <div class="infoPanel serverListHolder">
                <div class="infoPanel serverListLabel"></div>
                <div class="infoPanel serverListPanel"></div>
            </div>
        </div>
    </div>
</div>

</html>